apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-deployment
  namespace: financer
  labels:
    name: postgres
    env: productions
    app: financer
spec:
  serviceName: "postgres"
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - image: postgres:17-alpine
          name: postgres
          ports:
            - containerPort: 5432
              name: postgres
          resources:
            limits:
              cpu: "1"
              memory: "1Gi"
            requests:
              cpu: "0.2"
              memory: "200Mi"
          envFrom:
            - secretRef:
                name: postgres-credentials-secret
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: postgres-init
              mountPath: /docker-entrypoint-initdb.d/
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-data-volume
        - name: postgres-init
          configMap:
            name: postgres-initial-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-initial-config
  namespace: financer
data:
  init-users.sh: |
    #!/bin/bash
    set -e
    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
      CREATE USER $POSTGRES_USER WITH PASSWORD '$POSTGRES_PASSWORD';
      CREATE DATABASE $POSTGRES_DB;
      GRANT ALL PRIVILEGES ON DATABASE $POSTGRES_DB TO $POSTGRES_USER;
    EOSQL
---
apiVersion: v1
kind: Service
metadata:
  namespace: financer
  name: postgres
spec:
  ports:
    - port: 5432
  selector:
    app: postgres
  clusterIP: None

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data-volume
  namespace: financer
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: 2Gi
