apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb-deployment
  namespace: financer
  labels:
    name: mongodb
    env: productions
    app: financer
spec:
  serviceName: "mongodb"
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      initContainers:
        - name: init-mongo
          image: alpine/openssl
          command:
            [
              "sh",
              "-c",
              "openssl rand -base64 756 > /data/secrets/keyfile && chmod 400 /data/secrets/keyfile && chown 999:999 /data/secrets/keyfile",
            ]
          volumeMounts:
            - name: mongodb-keyfile
              mountPath: /data/secrets
      containers:
        - image: mongo:7.0.9
          name: mongodb
          command:
            [
              "docker-entrypoint.sh",
              "mongod",
              "--keyFile",
              "/data/secrets/keyfile",
              "--replSet",
              "rs0",
            ]
          ports:
            - containerPort: 27017
              name: mongodb
          resources:
            limits:
              cpu: "1"
              memory: "1Gi"
            requests:
              cpu: "0.2"
              memory: "200Mi"
          envFrom:
            - secretRef:
                name: mongodb-crentials-secret
          volumeMounts:
            - name: mongo-data
              mountPath: /data/db
            - name: mongodb-config
              mountPath: /data/configdb
            - name: mongo-init
              mountPath: /docker-entrypoint-initdb.d/
            - name: mongodb-keyfile
              mountPath: /data/secrets
      volumes:
        - name: mongo-data
          persistentVolumeClaim:
            claimName: mongodb-data-volume
        - name: mongodb-config
          persistentVolumeClaim:
            claimName: mongodb-config-volume
        - name: mongo-init
          configMap:
            name: mongodb-initial-config
        - name: mongodb-keyfile
          emptyDir: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-initial-config
  namespace: financer
data:
  init-users.sh: |
    if [ "$MONGO_INITDB_ROOT_USERNAME" ] && [ "$MONGO_INITDB_ROOT_PASSWORD" ]; then
    "${mongo[@]}" "$MONGO_INITDB_DATABASE" <<-EOJS
    db.createUser({
       user: $(_js_escape "$MONGO_INITDB_ROOT_USERNAME"),
       pwd: $(_js_escape "$MONGO_INITDB_ROOT_PASSWORD"),
       roles: [ "readWrite", "dbAdmin" ]
       })
    EOJS
    fi

    echo ======================================================
    echo created $MONGO_INITDB_ROOT_USERNAME in database $MONGO_INITDB_DATABASE
    echo ======================================================

  init-replica-set.sh: |
    if [ "$MONGO_INITDB_ROOT_USERNAME" ] && [ "$MONGO_INITDB_ROOT_PASSWORD" ]; then
    "${mongo[@]}" "$MONGO_INITDB_DATABASE" <<-EOJS
    rs.initiate({
       _id: "rs0",
       members: [
         { _id: 0, host: "mongodb:27017" }
       ]
    })
    EOJS
    fi

    echo ======================================================
    echo initiated replica set with $MONGO_INITDB_ROOT_USERNAME in database $MONGO_INITDB_DATABASE
    echo ======================================================
---
apiVersion: v1
kind: Service
metadata:
  namespace: financer
  name: mongodb
spec:
  ports:
    - port: 27017
  selector:
    app: mongodb
  clusterIP: None

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-data-volume
  namespace: financer
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: 2Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-config-volume
  namespace: financer
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: 10Mi
