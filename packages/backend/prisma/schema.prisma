generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEST_USER
}

enum AccountType {
  CASH
  SAVINGS
  INVESTMENT
  CREDIT
  LOAN
  LONG_TERM_SAVINGS
  PRE_ASSIGNED_CASH
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum TransactionTemplateType {
  MANUAL
  AUTO
}

enum UserPreferenceProperty {
  DEFAULT_INCOME_ACCOUNT
  DEFAULT_EXPENSE_ACCOUNT
  DEFAULT_TRANSFER_SOURCE_ACCOUNT
  DEFAULT_TRANSFER_TARGET_ACCOUNT
  TRANSACTION_LIST_CHUNK_SIZE
  UPDATE_INVESTMENT_MARKET_VALUE
  DASHBOARD_SETTINGS
  STATISTICS_SETTINGS
}

enum SystemLogLevel {
  ERROR
  INFO
  DEBUG
}

enum Theme {
  AUTO
  LIGHT
  DARK
}

model AccountBalanceChange {
  id        String   @id @default(uuid())
  accountId String
  amount    Decimal  @db.Decimal(10, 2)
  date      DateTime
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account_balance_change")
}

model Account {
  id        String      @id @default(uuid())
  balance   Decimal     @db.Decimal(10, 2)
  isDeleted Boolean     @default(false)
  name      String
  userId    String
  type      AccountType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountBalanceChange AccountBalanceChange[]
  fromTransactions     Transaction[]          @relation("TransactionFromAccount")
  toTransactions       Transaction[]          @relation("TransactionToAccount")
  fromTemplates        TransactionTemplate[]  @relation("TemplateFromAccount")
  toTemplates          TransactionTemplate[]  @relation("TemplateToAccount")

  @@index([type])
  @@index([userId])
  @@index([isDeleted])
  @@map("account")
}

model Session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
  @@map("session")
}

model SystemLog {
  id        String         @id @default(uuid())
  module    String
  service   String
  message   String
  level     SystemLogLevel
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("systemlogs")
}

model TransactionCategory {
  id               String            @id @default(uuid())
  deleted          Boolean           @default(false)
  name             String
  userId           String
  parentCategoryId String?
  visibility       TransactionType[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  user                       User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactionCategoryMapping TransactionCategoryMapping[]

  @@index([userId])
  @@index([visibility])
  @@index([deleted])
  @@map("category")
}

model TransactionCategoryMapping {
  id            String   @id @default(uuid())
  amount        Decimal  @db.Decimal(10, 2)
  categoryId    String
  description   String?
  userId        String
  transactionId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    TransactionCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  transaction Transaction         @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([transactionId])
  @@map("category_mapping")
}

model TransactionTemplateLog {
  id            String                  @id @default(uuid())
  eventType     TransactionTemplateType
  executed      DateTime                @default(now())
  templateId    String
  transactionId String
  userId        String
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt

  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  transaction Transaction         @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  template    TransactionTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventType])
  @@index([transactionId])
  @@index([templateId])
  @@index([executed])
  @@map("template_log")
}

model TransactionTemplate {
  id                 String                    @id @default(uuid())
  amount             Decimal?                  @db.Decimal(10, 2)
  categories         String[]                  @default([])
  dayOfMonth         Int?
  dayOfMonthToCreate Int?
  description        String
  fromAccount        String?
  toAccount          String?
  templateName       String
  templateType       TransactionTemplateType[]
  templateVisibility TransactionType?
  userId             String
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt

  user                   User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  from                   Account?                 @relation("TemplateFromAccount", fields: [fromAccount], references: [id], onDelete: Cascade)
  to                     Account?                 @relation("TemplateToAccount", fields: [toAccount], references: [id], onDelete: Cascade)
  transactionTemplateLog TransactionTemplateLog[]

  @@index([userId])
  @@index([templateType])
  @@index([templateVisibility])
  @@index([dayOfMonthToCreate])
  @@map("transaction_template")
}

model Transaction {
  id          String   @id @default(uuid())
  amount      Decimal  @db.Decimal(10, 2)
  date        DateTime
  description String
  fromAccount String?
  toAccount   String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user                   User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  from                   Account?                     @relation("TransactionFromAccount", fields: [fromAccount], references: [id], onDelete: Cascade)
  to                     Account?                     @relation("TransactionToAccount", fields: [toAccount], references: [id], onDelete: Cascade)
  categories             TransactionCategoryMapping[]
  transactionTemplateLog TransactionTemplateLog[]

  @@index([fromAccount])
  @@index([toAccount])
  @@index([date])
  @@index([userId])
  @@map("transaction")
}

model UserPreferences {
  id        String                 @id @default(uuid())
  key       UserPreferenceProperty
  userId    String
  value     String
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key], name: "userId_key")
  @@index([userId])
  @@map("user_preference")
}

model User {
  id              String   @id @default(uuid())
  auth0Id         String?  @unique
  githubId        String?  @unique
  name            String
  nickname        String
  profileImageUrl String?
  roles           Role[]   @default([])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  theme           Theme    @default(AUTO)

  accountBalanceChange       AccountBalanceChange[]
  account                    Account[]
  transactionCategory        TransactionCategory[]
  transactionCategoryMapping TransactionCategoryMapping[]
  transactionTemplateLog     TransactionTemplateLog[]
  transactionTemplate        TransactionTemplate[]
  transaction                Transaction[]
  userPreferences            UserPreferences[]

  @@map("user")
}
