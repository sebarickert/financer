name: Validate and Deploy

on:
  push:
    branches:
      - main

concurrency:
  group: ci-build_main
  cancel-in-progress: true

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - uses: silte/actions/prepare-node-job@v2
        with:
          ADDITIONAL_CACHE_KEY_PATHS: ${{ vars.ADDITIONAL_CACHE_KEY_PATHS }}
          ADDITIONAL_CACHE_PATHS: ${{ vars.ADDITIONAL_CACHE_PATHS }}

  lint:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: silte/actions/prepare-node-job@v2
        with:
          ADDITIONAL_CACHE_KEY_PATHS: ${{ vars.ADDITIONAL_CACHE_KEY_PATHS }}
          ADDITIONAL_CACHE_PATHS: ${{ vars.ADDITIONAL_CACHE_PATHS }}

      - name: eslint
        run: npm run lint

  lint-type:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: silte/actions/prepare-node-job@v2
        with:
          ADDITIONAL_CACHE_KEY_PATHS: ${{ vars.ADDITIONAL_CACHE_KEY_PATHS }}
          ADDITIONAL_CACHE_PATHS: ${{ vars.ADDITIONAL_CACHE_PATHS }}

      - name: Lint TS types
        run: npm run check-types

  test-frontend:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: silte/actions/prepare-node-job@v2
        with:
          ADDITIONAL_CACHE_KEY_PATHS: ${{ vars.ADDITIONAL_CACHE_KEY_PATHS }}
          ADDITIONAL_CACHE_PATHS: ${{ vars.ADDITIONAL_CACHE_PATHS }}

      - uses: silte/actions/test-jest@v2
        with:
          PACKAGE_ROOT: "packages/frontend"

  test-backend:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: silte/actions/prepare-node-job@v2
        with:
          ADDITIONAL_CACHE_KEY_PATHS: ${{ vars.ADDITIONAL_CACHE_KEY_PATHS }}
          ADDITIONAL_CACHE_PATHS: ${{ vars.ADDITIONAL_CACHE_PATHS }}

      - uses: silte/actions/test-jest@v2
        with:
          PACKAGE_ROOT: "packages/backend"

  build-frontend:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: silte/actions/prepare-node-job@v2
        with:
          ADDITIONAL_CACHE_KEY_PATHS: ${{ vars.ADDITIONAL_CACHE_KEY_PATHS }}
          ADDITIONAL_CACHE_PATHS: ${{ vars.ADDITIONAL_CACHE_PATHS }}

      - uses: silte/actions/build-node@v2
        with:
          PACKAGE_ROOT: packages/frontend
          BUILD_COMMAND: npm run build:frontend
          BUILD_FILES: ./build/frontend

  build-backend:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: silte/actions/prepare-node-job@v2
        with:
          ADDITIONAL_CACHE_KEY_PATHS: ${{ vars.ADDITIONAL_CACHE_KEY_PATHS }}
          ADDITIONAL_CACHE_PATHS: ${{ vars.ADDITIONAL_CACHE_PATHS }}

      - uses: silte/actions/build-node@v2
        with:
          PACKAGE_ROOT: packages/backend
          BUILD_COMMAND: npm run build:backend
          BUILD_FILES: ./build/backend

  run-e2e-tests:
    needs:
      - build-backend
      - build-frontend
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: silte/actions/prepare-node-job@v2
        with:
          ADDITIONAL_CACHE_KEY_PATHS: ${{ vars.ADDITIONAL_CACHE_KEY_PATHS }}
          ADDITIONAL_CACHE_PATHS: ${{ vars.ADDITIONAL_CACHE_PATHS }}

      - uses: silte/actions/build-node@v2
        with:
          PACKAGE_ROOT: packages/frontend
          BUILD_COMMAND: npm run build:frontend
          BUILD_FILES: ./build/frontend

      - uses: silte/actions/build-node@v2
        with:
          PACKAGE_ROOT: packages/backend
          BUILD_COMMAND: npm run build:backend
          BUILD_FILES: ./build/backend

      - uses: silte/actions/test-playwright@v2
        with:
          TEST_COMMAND: "npm run e2e:test"
          BLOB_REPORT_LOCATION: "packages/playwright/blob-report"
          SHARD: ${{ matrix.shard }}
          SHARD_COUNT: 15
        env:
          INITIALIZE_SCHEMA_AND_TEST_USER: true
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_NAME: testdb-${{ matrix.shard }}

  # Build image to build cache
  docker-build:
    uses: silte/actions/.github/workflows/build-docker-image.yml@v2
    with:
      DOCKER_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
      DOCKER_REPOSITORY: financer
      DOCKER_REGISTRY_USERNAME: ${{ github.repository_owner }}
      PUBLISH: false
    secrets:
      DOCKER_REGISTRY_PASSWORD: ${{ secrets.REGISTRY_TOKEN }}

  docker-publish:
    needs:
      - lint
      - lint-type
      - test-frontend
      - test-backend
      - run-e2e-tests
      - docker-build
    uses: silte/actions/.github/workflows/build-docker-image.yml@v2
    with:
      DOCKER_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
      DOCKER_REPOSITORY: financer
      DOCKER_REGISTRY_USERNAME: ${{ github.repository_owner }}
    secrets:
      DOCKER_REGISTRY_PASSWORD: ${{ secrets.REGISTRY_TOKEN }}

  merge-reports:
    if: always()
    needs: run-e2e-tests

    runs-on: ubuntu-latest
    steps:
      - name: Merge Artifacts
        uses: silte/actions/test-playwright-merge@v2

  static-analyze-frontend:
    needs:
      - test-frontend
    runs-on: ubuntu-latest
    steps:
      - uses: silte/actions/static-analyze-node@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          PACKAGE_ROOT: "packages/frontend"

  static-analyze-backend:
    needs:
      - test-backend
    runs-on: ubuntu-latest
    steps:
      - uses: silte/actions/static-analyze-node@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          PACKAGE_ROOT: "packages/backend"

  static-analyze-root:
    name: Analyze root
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  static-analyze-playwright:
    name: Analyze playwright
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: packages/playwright

  deploy:
    needs:
      - docker-publish
    runs-on: ubuntu-latest
    steps:
      - name: Write KUBE_CONFIG to file
        run: |
          echo "${{ secrets.DEPLOY_CONFIG }}" > /home/runner/work/financer/financer/kube_config.yaml
          echo "KUBE_CONFIG_PATH=/home/runner/work/financer/financer/kube_config.yaml" >> $GITHUB_ENV

      - name: Deploy
        uses: sebarickert/financer/.github/actions/deploy@main
        with:
          RELEASE_NAME: financer
          KUBE_CONFIG: ${{ env.KUBE_CONFIG_PATH }}
          TIMEOUT: 300

      - name: Delete KUBE_CONFIG file
        run: rm ${{ env.KUBE_CONFIG_PATH }}
